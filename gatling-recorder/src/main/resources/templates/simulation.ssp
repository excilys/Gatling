<%@ val protocolConfig: io.gatling.recorder.scenario.ProtocolConfigElement %>
<%@ val headers: Map[Int, List[(String, String)]] %>
<%@ val scenarioName: String %>
<%@ val simulationClassName: String %>
<%@ val packageName: String %>
<%@ val scenarioElements: Either[List[io.gatling.recorder.scenario.ScenarioElement], List[List[io.gatling.recorder.scenario.ScenarioElement]]] %>
<% if(!packageName.isEmpty) { %>package ${packageName} <% } %>


<% def printHeaders(headers: List[(String,String)], isMultiLine: Boolean) = {
	val start = if(isMultiLine) "\n" else ""
	val indent = if(isMultiLine) "\t" * 3 else ""
	start + (for ( headerElem <- headers ) yield indent + "\"" + headerElem._1 + "\" -> \"\"\"" + headerElem._2 + "\"\"\"").mkString(",\n")
	}
%>
import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._
import io.gatling.http.Headers.Names._
import scala.concurrent.duration._
import bootstrap._
import assertions._

class <%= simulationClassName %> extends Simulation {

	val httpConf = httpConfig
<%= protocolConfig %>

<% for( header <- headers ) { %>
	<% val isMultiLine = header._2.size != 1 %>
	val headers_${header._1} = Map(${printHeaders(header._2, isMultiLine)}<% if(!isMultiLine) { %>)<%}%>

<% if(isMultiLine) { %>
		)
<% } %>

<% } %>
<% scenarioElements match {%>
<% case Left(elements) =>%>
	val scn = scenario("${scenarioName}")
<% for (element <- elements) {%>
		<%if (!element.isInstanceOf[io.gatling.recorder.scenario.TagElement]){%>.<%}%><%=element%>
<%}%>
<% case Right(chains) =>%>
<% for((chain, i) <- chains.zipWithIndex) { %>
	val chain_<%= i %> =
<% var firstNonTagElement = true %>
<% for (element <- chain) {%>
		<%if (!element.isInstanceOf[io.gatling.recorder.scenario.TagElement]){%>
<%if (firstNonTagElement) firstNonTagElement=false else {%>.<%}%>
<%}%><%=element%>
<%}%>

<%}%>

	val scn = scenario("${scenarioName}").exec(<% for ((chain, i) <- chains.zipWithIndex) {%>chain_${i}<%if (chain != chains.last) {%>,<%}%><%}%>)
<%}%>

	setUp(scn.inject(atOnce(1 user)).protocolConfig(httpConf))
}