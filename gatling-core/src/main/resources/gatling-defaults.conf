#########################
# Gatling Configuration #
#########################

# This file contains all the settings configurable for Gatling with their default values

gatling {
	core {
		outputDirectoryBaseName = ""
		runDescription = ""
		encoding = "utf-8"							# encoding for every file manipulation made in gatling
		simulationClass = ""
		extract {
			regex {
				cache = true
			}
			xpath {
				cache = true
				saxParserFactory = "org.apache.xerces.jaxp.SAXParserFactoryImpl"
				domParserFactory = "org.apache.xerces.jaxp.DOMParserFactoryImpl"
				expandEntityReferences = false
				namespaceAware = true
			}
			jsonPath {
				cache = true
			}
			css {
				engine = jodd						# can change to jsoup
			}
		}
		timeOut {
			simulation = 86400							# in s
			actor = 5									# in s
		}
		directory {
			data = user-files/data
			requestBodies = user-files/request-bodies
			simulations = user-files/simulations
			reportsOnly = ""
			binaries = ""
			results = results
		}
	}
	charting {
		noReports = false
		statsTsvSeparator = "\t"
		maxPlotPerSeries = 1000
		accuracy = 10								# in ms
		indicators {
			lowerBound = 800						# in ms
			higherBound = 1200						# in ms
			percentile1 = 95						# in percents
			percentile2 = 99						# in percents
		}
	}
	http {
		allowPoolingConnection = true
		allowSslConnectionPool = true
		compressionEnabled = true   				# Set if compression should be supported or not
		connectionTimeout = 60000					# Timeout of the connection to the server (ms)
		idleConnectionInPoolTimeoutInMs = 60000
		idleConnectionTimeoutInMs = 60000
		ioThreadMultiplier = 2
		maximumConnectionsPerHost = -1
		maximumConnectionsTotal = -1
		maxRetry = 0								# number of times that a request should be tried again
		requestCompressionLevel = -1
		requestTimeoutInMs = 60000					# Timeout of the requests (ms)
		useProxyProperties = false
		userAgent = "NING/1.0"
		useRawUrl = false
		nonStandardJsonSupport = ""
		warmUpUrl = "http://goo.gl/xUrsE"
		ssl {
			trustStore {
				type = ""
				file = ""
				password = ""
				algorithm = ""
			}
			keyStore {
				type = ""
				file = ""
				password = ""
				algorithm = ""
			}
		}
	}
	data {
		writers = "console, file"
		reader = file
		console {
			light = false							# display a light version without detailed request stats
		}
		file {
			bufferSize: 8192
		}
		jdbc {
			db {
				url = "jdbc:mysql://localhost:3306/temp"
				username = "root"
				password = "123123q"
			}
			bufferSize = 20
			create {
				createRunRecordTable = "CREATE TABLE IF NOT EXISTS `RunRecords` ( `id` INT NOT NULL AUTO_INCREMENT , `runDate` DATETIME NULL , `simulationId` VARCHAR(45) NULL , `runDescription` VARCHAR(45) NULL , PRIMARY KEY (`id`) )"
				createRequestRecordTable = "CREATE TABLE IF NOT EXISTS `RequestRecords` (`id` int(11) NOT NULL AUTO_INCREMENT, `runId` int DEFAULT NULL, `scenario` varchar(45) DEFAULT NULL, `userId` int DEFAULT NULL, `name` varchar(50) DEFAULT NULL, `requestStartDate` bigint DEFAULT NULL, `requestEndDate` bigint DEFAULT NULL, `responseStartDate` bigint DEFAULT NULL, `responseEndDate` bigint DEFAULT NULL, `status` varchar(2) DEFAULT NULL, `message` varchar(4500) DEFAULT NULL, `responseTime` bigint DEFAULT NULL, PRIMARY KEY (`id`) )"
				createScenarioRecordTable = "CREATE TABLE IF NOT EXISTS `ScenarioRecords` (`id` int(11) NOT NULL AUTO_INCREMENT, `runId` int DEFAULT NULL, `scenarioName` varchar(45) DEFAULT NULL, `userId` int DEFAULT NULL, `event` varchar(50) DEFAULT NULL, `startDate` bigint DEFAULT NULL, `endDate` bigint DEFAULT NULL, PRIMARY KEY (`id`) )"
				createGroupRecordTable = "CREATE TABLE IF NOT EXISTS `GroupRecords` (`id` int(11) NOT NULL AUTO_INCREMENT, `runId` int DEFAULT NULL, `scenarioName` varchar(45) DEFAULT NULL, `userId` int DEFAULT NULL, `entryDate` bigint DEFAULT NULL, `exitDate` bigint DEFAULT NULL, `status` varchar(2) DEFAULT NULL, PRIMARY KEY (`id`) )"
			}
			insert {
				insertRunRecord = "INSERT INTO RunRecords (runDate, simulationId, runDescription) VALUES (?,?,?)"
				insertRequestRecord = "INSERT INTO RequestRecords (runId, scenario, userId, name, requestStartDate, requestEndDate, responseStartDate, responseEndDate, status, message, responseTime) VALUES (?,?,?,?,?,?,?,?,?,?,?)"
				insertScenarioRecord = "INSERT INTO ScenarioRecords (runId, scenarioName, userId, event, startDate, endDate) VALUES (?,?,?,?,?,?)"
				insertGroupRecord = "INSERT INTO GroupRecords (runId, scenarioName, userId, entryDate, exitDate, status) VALUES (?,?,?,?,?,?)"
			}
		}
		graphite {
			light = false							# only send the all* stats
			host = "localhost"
			port = 2003
			protocol = "tcp"
			rootPathPrefix = "gatling"
			bucketWidth = 100
			bufferSize = 8192
		}
	}
}
